define(function() { return {"basic.vert":"attribute vec3 aVertexPosition;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;void main(void) {\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);}","basic.frag":"precision mediump float;void main(void) {\tgl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);}","basic2.vert":"attribute vec3 aVertexPosition;attribute vec4 aVertexColor;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec4 vColor;void main(void) {\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\tvColor = aVertexColor;}","basic2.frag":"precision mediump float;varying vec4 vColor;void main(void) {\tgl_FragColor = vColor;}","texture.vert":"attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec2 vTextureCoord;void main(void) {\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\tvTextureCoord = aTextureCoord;}","texture.frag":"precision mediump float;varying vec2 vTextureCoord;uniform sampler2D uSampler;void main(void) {\tgl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));}","light1.vert":"attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;attribute vec3 aVertexNormal;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;uniform mat3 uNormalMatrix;uniform vec3 uAmbientColor;uniform vec3 uLightingDirection;uniform vec3 uDirectionalLightingColor;uniform bool uUseLighting;varying vec2 vTextureCoord;varying vec3 vLightWeighting;void main(void) {\tgl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\tvTextureCoord = aTextureCoord;\tif(!uUseLighting) {\t\tvLightWeighting = vec3(1.0, 1.0, 1.0);\t}\telse {\t\tvec3 transformedNormal = uNormalMatrix * aVertexNormal;\t\tfloat directionalLightWeighting = max(dot(transformedNormal, uLightingDirection), 0.0);\t\tvLightWeighting = uAmbientColor + uDirectionalLightingColor * directionalLightWeighting;\t}}\t","light1.frag":"precision mediump float;varying vec2 vTextureCoord;varying vec3 vLightWeighting;uniform sampler2D uSampler;uniform float uAlpha;void main(void) {\tvec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\tgl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a * uAlpha);}","star.vert":"attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec2 vTextureCoord;void main(void) {    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);    vTextureCoord = aTextureCoord;}","star.frag":"precision mediump float;varying vec2 vTextureCoord;uniform sampler2D uSampler;uniform vec3 uColor;void average(in vec3 color, out float colorAverage) {\tcolorAverage = (color.r + color.g + color.b) / 3.0;}void adjustBrightnessByLocation(inout vec4 fragmentColor, in vec2 textureLocation) {\tfloat distanceFromTextureCenter = distance(textureLocation, vec2(0.5, 0.5));\tfloat adjustedDistance = distanceFromTextureCenter * 4.0 + 1.0;\tfloat distanceBasedBrightnessAdjustor = 1.0 / pow(adjustedDistance, 2.0);\tvec4 distanceWeightedColor = vec4(\t\tdistanceBasedBrightnessAdjustor, \t\tdistanceBasedBrightnessAdjustor, \t\tdistanceBasedBrightnessAdjustor, \t\t0.0\t);\tfragmentColor += distanceWeightedColor;}void main(void) {\tvec2 textureLocation = vec2(vTextureCoord.s, vTextureCoord.t);    vec4 textureColor = texture2D(uSampler, textureLocation);    float averageWeightedAlpha = 0.0;    average(textureColor.rgb, averageWeightedAlpha);    vec4 fragmentColor = textureColor * vec4(uColor, averageWeightedAlpha);    adjustBrightnessByLocation(fragmentColor, textureLocation);    gl_FragColor = fragmentColor;}","sphere.vert":"attribute vec3 aVertexPosition;attribute vec3 aVertexNormal;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;uniform mat3 uNormalMatrix;uniform vec3 uAmbientColor;uniform vec3 uLightingDirection;uniform vec3 uDirectionalColor;uniform vec3 uPointLightingLocation;uniform vec3 uPointLightingColor;uniform bool uUseLighting;varying vec2 vTextureCoord;varying vec3 vLightWeighting;void main(void) {\tvec4 mvPosition = uMVMatrix * vec4(aVertexPosition, 1.0);\tgl_Position = uPMatrix * mvPosition;\tvTextureCoord = aTextureCoord;\tif(!uUseLighting) {\t\tvLightWeighting = vec3(1.0, 1.0, 1.0);\t}\telse {\t\tvec3 transformedNormal = uNormalMatrix * aVertexNormal;\t\tvec3 lightDirection = normalize(uPointLightingLocation - mvPosition.xyz);\t\tfloat directionalLightWeighting = max(dot(transformedNormal, lightDirection), 0.0);\t\tvLightWeighting = uAmbientColor + uPointLightingColor * directionalLightWeighting;\t}}","sphere.frag":"precision mediump float;varying vec2 vTextureCoord;varying vec3 vLightWeighting;uniform sampler2D uSampler;void main(void) {\tvec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\tgl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a);}"} });