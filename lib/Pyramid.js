// Generated by CoffeeScript 1.9.0
(function() {
  define(['GLContext', 'ModelViewMatrix', 'PerspectiveMatrix', 'glMatrix-0.9.5.min', 'ShaderProgramFactory'], function(glContext, mvMatrix, pMatrix, glMatrix, ShaderProgramFactory) {
    var Pyramid;
    Pyramid = (function() {
      var gl;

      gl = glContext.getSingleton();

      function Pyramid() {
        this.x = this.y = this.z = 0;
        this.xRot = this.yRot = this.zRot = 0;
        this.vertexPositionBuffer = gl.createBuffer();
        this.vertexColorBuffer = gl.createBuffer();
        this.shaderProgram = ShaderProgramFactory.getInstance('basic2.vert', 'basic2.frag');
        this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram.program, 'aVertexPosition');
        gl.enableVertexAttribArray(this.shaderProgram.program, this.shaderProgram.vertexPositionAttribute);
        this.shaderProgram.vertexColorAttribute = gl.getAttribLocation(this.shaderProgram.program, 'aVertexColor');
        gl.enableVertexAttribArray(this.shaderProgram.program, this.shaderProgram.vertexColorAttribute);
        this.shaderProgram.pMatrixUniform = gl.getUniformLocation(this.shaderProgram.program, 'uPMatrix');
        this.shaderProgram.mvMatrixUniform = gl.getUniformLocation(this.shaderProgram.program, 'uMVMatrix');
      }

      Pyramid.prototype.initBuffers = function() {
        var colors, vertices;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
        vertices = [0.0, 1.0, 0.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 0.0, 1.0, 0.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 0.0, 1.0, 0.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        this.vertexPositionBuffer.itemSize = 3;
        this.vertexPositionBuffer.numberOfItems = 12;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexColorBuffer);
        colors = [1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
        this.vertexColorBuffer.itemSize = 4;
        return this.vertexColorBuffer.numberOfItems = 12;
      };

      Pyramid.prototype.render = function() {
        gl.useProgram(this.shaderProgram.program);
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
        mat4.identity(mvMatrix);
        mat4.translate(mvMatrix, [this.x, this.y, this.z]);
        mat4.rotate(mvMatrix, Math.toRadians(this.xRot), [1, 0, 0]);
        mat4.rotate(mvMatrix, Math.toRadians(this.yRot), [0, 1, 0]);
        mat4.rotate(mvMatrix, Math.toRadians(this.zRot), [0, 0, 1]);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
        gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexColorBuffer);
        gl.vertexAttribPointer(this.shaderProgram.vertexColorAttribute, this.vertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.uniformMatrix4fv(this.shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(this.shaderProgram.mvMatrixUniform, false, mvMatrix);
        return gl.drawArrays(gl.TRIANGLES, 0, this.vertexPositionBuffer.numberOfItems);
      };

      return Pyramid;

    })();
    return {
      'getInstance': function() {
        return new Pyramid();
      }
    };
  });

}).call(this);
