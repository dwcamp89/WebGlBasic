// Generated by CoffeeScript 1.9.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  define([], function() {
    var DirectionalLight, Light, PointLight;
    Light = (function() {
      function Light() {
        this.setBlue = __bind(this.setBlue, this);
        this.setGreen = __bind(this.setGreen, this);
        this.setRed = __bind(this.setRed, this);
        this.getBlue = __bind(this.getBlue, this);
        this.getGreen = __bind(this.getGreen, this);
        this.getRed = __bind(this.getRed, this);
        this.color = [0, 0, 0];
      }

      Light.prototype.getRed = function() {
        return this.color[0];
      };

      Light.prototype.getGreen = function() {
        return this.color[1];
      };

      Light.prototype.getBlue = function() {
        return this.color[2];
      };

      Light.prototype.setRed = function(red) {
        return this.color[0] = red || 0;
      };

      Light.prototype.setGreen = function(green) {
        return this.color[1] = green || 0;
      };

      Light.prototype.setBlue = function(blue) {
        return this.color[2] = blue || 0;
      };

      return Light;

    })();
    DirectionalLight = (function(_super) {
      __extends(DirectionalLight, _super);

      function DirectionalLight() {
        this.setZ = __bind(this.setZ, this);
        this.setY = __bind(this.setY, this);
        this.setX = __bind(this.setX, this);
        this.getZ = __bind(this.getZ, this);
        this.getY = __bind(this.getY, this);
        this.getX = __bind(this.getX, this);
        DirectionalLight.__super__.constructor.call(this);
        this.direction = [0, 0, 0];
      }

      DirectionalLight.prototype.getX = function() {
        return this.direction[0];
      };

      DirectionalLight.prototype.getY = function() {
        return this.direction[1];
      };

      DirectionalLight.prototype.getZ = function() {
        return this.direction[2];
      };

      DirectionalLight.prototype.setX = function(x) {
        return this.direction[0] = x || 0;
      };

      DirectionalLight.prototype.setY = function(y) {
        return this.direction[1] = y || 0;
      };

      DirectionalLight.prototype.setZ = function(z) {
        return this.direction[2] = z || 0;
      };

      return DirectionalLight;

    })(Light);
    PointLight = (function(_super) {
      __extends(PointLight, _super);

      function PointLight() {
        this.setZ = __bind(this.setZ, this);
        this.setY = __bind(this.setY, this);
        this.setX = __bind(this.setX, this);
        this.getZ = __bind(this.getZ, this);
        this.getY = __bind(this.getY, this);
        this.getX = __bind(this.getX, this);
        PointLight.__super__.constructor.call(this);
        this.location = [0, 0, 0];
      }

      PointLight.prototype.getX = function() {
        return this.location[0];
      };

      PointLight.prototype.getY = function() {
        return this.location[1];
      };

      PointLight.prototype.getZ = function() {
        return this.location[2];
      };

      PointLight.prototype.setX = function(x) {
        return this.location[0] = x || 0;
      };

      PointLight.prototype.setY = function(y) {
        return this.location[1] = y || 0;
      };

      PointLight.prototype.setZ = function(z) {
        return this.location[2] = z || 0;
      };

      return PointLight;

    })(Light);
    return {
      getInstance: function(lightType) {
        if (lightType === 'DirectionalLight') {
          return new DirectionalLight();
        } else if (lightType === 'PointLight') {
          return new PointLight();
        } else {
          return new Light();
        }
      }
    };
  });

}).call(this);
