// Generated by CoffeeScript 1.9.0
(function() {
  require(['glMatrix-0.9.5.min', 'PerspectiveMatrix', 'webgl-utils', 'WebGlConstants', 'GLContext', 'ShapeFactory'], function(glMatrix, pMatrix, webGlUtils, webGlConstants, glContext, ShapeFactory) {
    var animate, cube, currentlyPressedKeys, drawScene, gl, handleKeyDown, handleKeyUp, handleKeys, initBuffers, lastTime, start, tick;
    gl = glContext.getSingleton();
    cube = null;
    initBuffers = function() {
      cube = ShapeFactory.getShape('TexturedCube');
      return cube.initBuffers();
    };
    drawScene = function() {
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      return cube.render();
    };
    lastTime = 0;
    animate = function() {
      var elapsed, timeNow;
      timeNow = new Date().getTime();
      if (lastTime !== 0) {
        elapsed = timeNow - lastTime;
        cube.xRot += (cube.xRotSpeed * elapsed) / 1000.0;
        cube.yRot += (cube.yRotSpeed * elapsed) / 1000.0;
        cube.zRot += (cube.zRotSpeed * elapsed) / 1000.0;
      }
      return lastTime = timeNow;
    };
    tick = function() {
      requestAnimFrame(tick);
      handleKeys();
      drawScene();
      return animate();
    };
    currentlyPressedKeys = {};
    handleKeyDown = function(event) {
      return currentlyPressedKeys[event.keyCode] = true;
    };
    handleKeyUp = function(event) {
      return currentlyPressedKeys[event.keyCode] = false;
    };
    handleKeys = function() {
      if (currentlyPressedKeys[65]) {
        cube.z += 0.5;
      }
      if (currentlyPressedKeys[83]) {
        cube.z -= 0.5;
      }
      if (currentlyPressedKeys[68]) {
        cube.yRotSpeed -= 1;
      }
      if (currentlyPressedKeys[70]) {
        return cube.yRotSpeed += 1;
      }
    };
    start = function() {
      initBuffers();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LEQUAL);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      cube.z = -8.0;
      document.onkeydown = handleKeyDown;
      document.onkeyup = handleKeyUp;
      document.getElementById('min-nearest').onclick = function() {
        return cube.setMinFilter(gl.NEAREST);
      };
      document.getElementById('min-linear').onclick = function() {
        return cube.setMinFilter(gl.LINEAR);
      };
      document.getElementById('min-nearest-mipmap-nearest').onclick = function() {
        return cube.setMinFilter(gl.NEAREST_MIPMAP_NEAREST);
      };
      document.getElementById('min-linear-mipmap-nearest').onclick = function() {
        return cube.setMinFilter(gl.LINEAR_MIPMAP_NEAREST);
      };
      document.getElementById('min-nearest-mipmap-linear').onclick = function() {
        return cube.setMinFilter(gl.NEAREST_MIPMAP_LINEAR);
      };
      document.getElementById('min-linear-mipmap-linear').onclick = function() {
        return cube.setMinFilter(gl.LINEAR_MIPMAP_LINEAR);
      };
      document.getElementById('mag-nearest').onclick = function() {
        return cube.setMagFilter(gl.NEAREST);
      };
      document.getElementById('mag-linear').onclick = function() {
        return cube.setMagFilter(gl.LINEAR);
      };
      return tick();
    };
    return start();
  });

}).call(this);
