// Generated by CoffeeScript 1.9.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['gl', 'ModelViewMatrix', 'PerspectiveMatrix', 'glMatrix-0.9.5.min', 'ShaderProgramFactory'], function(gl, mvMatrix, pMatrix, glMatrix, ShaderProgramFactory) {
    var Cube;
    Cube = (function() {
      var FILTERS, FILTER_LINEAR, FILTER_MIPMAP, FILTER_NEAREST, degToRad, handleLoadedTextures;

      FILTER_NEAREST = 0;

      FILTER_LINEAR = 1;

      FILTER_MIPMAP = 2;

      FILTERS = [FILTER_NEAREST, FILTER_LINEAR, FILTER_MIPMAP];

      function Cube() {
        this.render = __bind(this.render, this);
        this.x = this.y = this.z = 0;
        this.xRot = this.yRot = this.zRot = 0;
        this.xRotSpeed = this.yRotSpeed = this.zRotSpeed = 10;
        this.filter = FILTER_NEAREST;
        this.vertexPositionBuffer = gl.createBuffer();
        this.vertexIndexBuffer = gl.createBuffer();
        this.vertexTextureCoordBuffer = gl.createBuffer();
        this.shaderProgram = ShaderProgramFactory.getInstance('texture.vert', 'texture.frag');
        this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram.program, 'aVertexPosition');
        gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);
        this.shaderProgram.textureCoordAttribute = gl.getAttribLocation(this.shaderProgram.program, 'aTextureCoord');
        gl.enableVertexAttribArray(this.shaderProgram.textureCoordAttribute);
        this.shaderProgram.pMatrixUniform = gl.getUniformLocation(this.shaderProgram.program, 'uPMatrix');
        this.shaderProgram.mvMatrixUniform = gl.getUniformLocation(this.shaderProgram.program, 'uMVMatrix');
        this.shaderProgram.samplerUniform = gl.getUniformLocation(this.shaderProgram.program, 'uSampler');
        this.crateTextures = new Array();
        this.initTextures();
      }

      Cube.prototype.initTextures = function() {
        var crateImage, i, texture;
        crateImage = new Image();
        i = 0;
        while (i < 3) {
          texture = gl.createTexture();
          texture.image = crateImage;
          this.crateTextures.push(texture);
          i++;
        }
        crateImage.onload = (function(_this) {
          return function() {
            return handleLoadedTextures(_this.crateTextures);
          };
        })(this);
        return crateImage.src = 'images/crate.gif';
      };

      handleLoadedTextures = function(textures) {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.bindTexture(gl.TEXTURE_2D, textures[0]);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textures[0].image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.bindTexture(gl.TEXTURE_2D, textures[1]);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textures[1].image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.bindTexture(gl.TEXTURE_2D, textures[2]);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textures[2].image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
        gl.generateMipmap(gl.TEXTURE_2D);
        return gl.bindTexture(gl.TEXTURE_2D, null);
      };

      Cube.prototype.initBuffers = function() {
        var elemVertices, textureCoords, vertices;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
        vertices = [-1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        this.vertexPositionBuffer.itemSize = 3;
        this.vertexPositionBuffer.numberOfItems = 24;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTextureCoordBuffer);
        textureCoords = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
        this.vertexTextureCoordBuffer.itemSize = 2;
        this.vertexTextureCoordBuffer.numItems = 24;
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
        elemVertices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(elemVertices), gl.STATIC_DRAW);
        this.vertexIndexBuffer.itemSize = 3;
        return this.vertexIndexBuffer.numberOfItems = 36;
      };

      Cube.prototype.render = function() {
        gl.useProgram(this.shaderProgram.program);
        mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
        mat4.identity(mvMatrix);
        mat4.translate(mvMatrix, [this.x, this.y, this.z]);
        mat4.rotate(mvMatrix, degToRad(this.xRot), [1, 0, 0]);
        mat4.rotate(mvMatrix, degToRad(this.yRot), [0, 1, 0]);
        mat4.rotate(mvMatrix, degToRad(this.zRot), [0, 0, 1]);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
        gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTextureCoordBuffer);
        gl.vertexAttribPointer(this.shaderProgram.textureCoordAttribute, this.vertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this.crateTextures[this.filter]);
        gl.uniform1i(this.shaderProgram.samplerUniform, 0);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
        gl.uniformMatrix4fv(this.shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(this.shaderProgram.mvMatrixUniform, false, mvMatrix);
        return gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numberOfItems, gl.UNSIGNED_SHORT, 0);
      };

      degToRad = function(degrees) {
        return degrees * Math.PI / 180.0;
      };

      return Cube;

    })();
    return {
      'getInstance': function() {
        return new Cube();
      }
    };
  });

}).call(this);
