// Generated by CoffeeScript 1.9.0
(function() {
  define(['WebGlConstants', 'gl', 'shader'], function(webGlConstants, gl, shader) {
    var fragmentShader, getShader, shaderProgram, vertexShader;
    getShader = function(shaderObj) {
      var newShader;
      newShader = null;
      if (shaderObj.type === "FRAGMENT") {
        newShader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderObj.type === "VERTEX") {
        newShader = gl.createShader(gl.VERTEX_SHADER);
      } else {
        return null;
      }
      gl.shaderSource(newShader, shaderObj.src);
      gl.compileShader(newShader);
      if (!gl.getShaderParameter(newShader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(newShader));
        console.log(gl.getShaderInfoLog(newShader));
        return null;
      }
      return newShader;
    };
    fragmentShader = getShader(shader.fragment);
    vertexShader = getShader(shader.vertex);
    shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, fragmentShader);
    gl.attachShader(shaderProgram, vertexShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
      console.log(webGlConstants.ERROR_MESSAGES.UNABLE_TO_INITIALIZE_SHADERS);
      alert(webGlConstants.ERROR_MESSAGES.UNABLE_TO_INITIALIZE_SHADERS);
    }
    gl.useProgram(shaderProgram);
    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
    gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
    shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
    gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
    shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
    shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    return shaderProgram;
  });

}).call(this);
