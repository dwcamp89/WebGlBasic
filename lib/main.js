// Generated by CoffeeScript 1.9.0
(function() {
  require(['glMatrix-0.9.5.min', 'ModelViewMatrix', 'PerspectiveMatrix', 'webgl-utils', 'WebGlConstants', 'GLContext', 'ShapeFactory', 'Star'], function(glMatrix, mvMatrix, pMatrix, webGlUtils, webGlConstants, glContext, ShapeFactory, Star) {
    var animate, currentlyPressedKeys, drawScene, getNewStarObject, gl, handleKeyDown, handleKeyUp, handleKeys, initBuffers, initWorldObjects, lastTime, numberOfStars, start, tick, worldObjects;
    gl = glContext.getSingleton();
    worldObjects = [];
    numberOfStars = 50;
    Math.toRadians = function(degrees) {
      return degrees * Math.PI / 180.0;
    };
    initWorldObjects = function() {
      var i;
      return worldObjects = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= numberOfStars ? _i < numberOfStars : _i > numberOfStars; i = 0 <= numberOfStars ? ++_i : --_i) {
          _results.push(getNewStarObject(i));
        }
        return _results;
      })();
    };
    getNewStarObject = function(count) {
      var newStarObject;
      newStarObject = ShapeFactory.getShape('Star');
      newStarObject.distance = (count / numberOfStars) * 5.0;
      newStarObject.rotationSpeed = count / numberOfStars;
      return newStarObject;
    };
    initBuffers = function() {
      var worldObject, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        worldObject = worldObjects[_i];
        _results.push(worldObject.initBuffers());
      }
      return _results;
    };
    drawScene = function() {
      var object, _i, _len, _results;
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
      gl.enable(gl.BLEND);
      mat4.identity(mvMatrix);
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        object = worldObjects[_i];
        _results.push(object.render());
      }
      return _results;
    };
    lastTime = 0;
    animate = function() {
      var elapsedTime, timeNow, worldObject, _i, _len;
      Star.setTwinkle(document.getElementById('useTwinkleCheckbox').checked);
      timeNow = new Date().getTime();
      if (lastTime !== 0) {
        elapsedTime = timeNow - lastTime;
        for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
          worldObject = worldObjects[_i];
          worldObject.animate(elapsedTime);
        }
      }
      return lastTime = timeNow;
    };
    tick = function() {
      requestAnimFrame(tick);
      handleKeys();
      drawScene();
      return animate();
    };
    currentlyPressedKeys = {};
    handleKeyDown = function(event) {
      return currentlyPressedKeys[event.keyCode] = true;
    };
    handleKeyUp = function(event) {
      return currentlyPressedKeys[event.keyCode] = false;
    };
    handleKeys = function() {
      var worldObject, _i, _j, _k, _l, _len, _len1, _len2, _len3, _results;
      if (currentlyPressedKeys[33]) {
        for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
          worldObject = worldObjects[_i];
          worldObject.zoom += 2;
        }
      }
      if (currentlyPressedKeys[34]) {
        for (_j = 0, _len1 = worldObjects.length; _j < _len1; _j++) {
          worldObject = worldObjects[_j];
          worldObject.zoom -= 2;
        }
      }
      if (currentlyPressedKeys[38]) {
        for (_k = 0, _len2 = worldObjects.length; _k < _len2; _k++) {
          worldObject = worldObjects[_k];
          worldObject.tilt += 2;
        }
      }
      if (currentlyPressedKeys[40]) {
        _results = [];
        for (_l = 0, _len3 = worldObjects.length; _l < _len3; _l++) {
          worldObject = worldObjects[_l];
          _results.push(worldObject.tilt -= 2);
        }
        return _results;
      }
    };
    start = function() {
      initWorldObjects();
      initBuffers();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      document.onkeydown = handleKeyDown;
      document.onkeyup = handleKeyUp;
      return tick();
    };
    return start();
  });

}).call(this);
