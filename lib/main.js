// Generated by CoffeeScript 1.9.0
(function() {
  require(['glMatrix-0.9.5.min', 'ModelViewMatrix', 'PerspectiveMatrix', 'webgl-utils', 'WebGlConstants', 'GLContext', 'ShapeFactory', 'Star', 'World'], function(glMatrix, mvMatrix, pMatrix, webGlUtils, webGlConstants, glContext, ShapeFactory, Star, World) {
    var DOWN, LEFT, PAGE_DOWN, PAGE_UP, RIGHT, UP, animate, currentlyPressedKeys, drawScene, gl, handleKeyDown, handleKeyUp, handleKeys, initBuffers, initWorldObjects, lastTime, numberOfStars, start, tick, world, worldObjects;
    gl = glContext.getSingleton();
    world = World.getInstance();
    worldObjects = [];
    numberOfStars = 50;
    PAGE_UP = 33;
    PAGE_DOWN = 34;
    LEFT = 37;
    RIGHT = 39;
    UP = 38;
    DOWN = 40;
    Math.toRadians = function(degrees) {
      return degrees * Math.PI / 180.0;
    };
    initWorldObjects = function() {};
    initBuffers = function() {
      var worldObject, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        worldObject = worldObjects[_i];
        _results.push(worldObject.initBuffers());
      }
      return _results;
    };
    drawScene = function() {
      var object, _i, _len, _results;
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      if (!world.isReadyToRender()) {
        return;
      }
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      mat4.identity(mvMatrix);
      world.render();
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        object = worldObjects[_i];
        _results.push(object.render());
      }
      return _results;
    };
    lastTime = 0;
    animate = function() {
      var elapsedTime, timeNow, worldObject, _i, _len;
      timeNow = new Date().getTime();
      if (lastTime !== 0) {
        elapsedTime = timeNow - lastTime;
        world.animate(elapsedTime);
        for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
          worldObject = worldObjects[_i];
          worldObject.animate(elapsedTime);
        }
      }
      return lastTime = timeNow;
    };
    tick = function() {
      requestAnimFrame(tick);
      handleKeys();
      drawScene();
      return animate();
    };
    currentlyPressedKeys = {};
    handleKeyDown = function(event) {
      return currentlyPressedKeys[event.keyCode] = true;
    };
    handleKeyUp = function(event) {
      return currentlyPressedKeys[event.keyCode] = false;
    };
    handleKeys = function() {
      if (currentlyPressedKeys[PAGE_UP]) {
        world.deltaPitch = 0.6;
      } else if (currentlyPressedKeys[PAGE_DOWN]) {
        world.deltaPitch = -0.6;
      } else {
        world.deltaPitch = 0.0;
      }
      if (currentlyPressedKeys[LEFT]) {
        world.deltaYaw = 0.6;
      } else if (currentlyPressedKeys[RIGHT]) {
        world.deltaYaw = -0.6;
      } else {
        world.deltaYaw = 0.0;
      }
      if (currentlyPressedKeys[UP]) {
        return world.speed = 0.003;
      } else if (currentlyPressedKeys[DOWN]) {
        return world.speed = -0.003;
      } else {
        return world.speed = 0.0;
      }
    };
    start = function() {
      initWorldObjects();
      initBuffers();
      world.loadWorld();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      document.onkeydown = handleKeyDown;
      document.onkeyup = handleKeyUp;
      return tick();
    };
    return start();
  });

}).call(this);
