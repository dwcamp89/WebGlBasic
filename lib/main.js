// Generated by CoffeeScript 1.9.0
(function() {
  require(['glMatrix-0.9.5.min', 'ModelViewMatrix', 'PerspectiveMatrix', 'webgl-utils', 'WebGlConstants', 'GLContext', 'ShapeFactory'], function(glMatrix, mvMatrix, pMatrix, webGlUtils, webGlConstants, glContext, ShapeFactory) {
    var DOWN, LEFT, PAGE_DOWN, PAGE_UP, RIGHT, UP, animate, drawScene, gl, handleMouseDown, handleMouseMove, handleMouseUp, initBuffers, initWorldObjects, lastMouseX, lastMouseY, lastTime, mouseDown, start, tick, worldObjects;
    gl = glContext.getSingleton();
    worldObjects = [];
    PAGE_UP = 33;
    PAGE_DOWN = 34;
    LEFT = 37;
    RIGHT = 39;
    UP = 38;
    DOWN = 40;
    Math.toRadians = function(degrees) {
      return degrees * Math.PI / 180.0;
    };
    initWorldObjects = function() {
      var moonSphere;
      moonSphere = ShapeFactory.getShape('Sphere');
      moonSphere.z = -6;
      return worldObjects.push(moonSphere);
    };
    initBuffers = function() {
      var worldObject, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        worldObject = worldObjects[_i];
        _results.push(worldObject.initBuffers());
      }
      return _results;
    };
    drawScene = function() {
      var moonSphere, object, useLighting, _i, _len, _results;
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      mat4.identity(mvMatrix);
      moonSphere = worldObjects[0];
      useLighting = document.getElementById('useLightingCheckbox').checked;
      moonSphere.useLighting = useLighting;
      moonSphere.ambientLight.setRed(document.getElementById('ambientRedInput').value);
      moonSphere.ambientLight.setGreen(document.getElementById('ambientGreenInput').value);
      moonSphere.ambientLight.setBlue(document.getElementById('ambientBlueInput').value);
      moonSphere.directionalLight.setX(document.getElementById('directionalXInput').value);
      moonSphere.directionalLight.setY(document.getElementById('directionalYInput').value);
      moonSphere.directionalLight.setZ(document.getElementById('directionalZInput').value);
      moonSphere.directionalLight.setRed(document.getElementById('directionalRedInput').value);
      moonSphere.directionalLight.setGreen(document.getElementById('directionalGreenInput').value);
      moonSphere.directionalLight.setBlue(document.getElementById('directionalBlueInput').value);
      _results = [];
      for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
        object = worldObjects[_i];
        _results.push(object.render());
      }
      return _results;
    };
    lastTime = 0;
    animate = function() {
      var elapsedTime, timeNow, worldObject, _i, _len;
      timeNow = new Date().getTime();
      if (lastTime !== 0) {
        elapsedTime = timeNow - lastTime;
        for (_i = 0, _len = worldObjects.length; _i < _len; _i++) {
          worldObject = worldObjects[_i];
          worldObject.animate(elapsedTime);
        }
      }
      return lastTime = timeNow;
    };
    tick = function() {
      requestAnimFrame(tick);
      drawScene();
      return animate();
    };
    mouseDown = false;
    lastMouseX = lastMouseY = null;
    handleMouseUp = function() {
      return mouseDown = false;
    };
    handleMouseMove = function(event) {
      var deltaX, deltaY, newRotationMatrix, newX, newY, sphere;
      if (!mouseDown) {
        return;
      }
      newX = event.clientX;
      deltaX = newX - lastMouseX;
      newY = event.clientY;
      deltaY = newY - lastMouseY;
      newRotationMatrix = mat4.create();
      mat4.identity(newRotationMatrix);
      mat4.rotate(newRotationMatrix, Math.toRadians(deltaX / 10), [0, 1, 0]);
      mat4.rotate(newRotationMatrix, Math.toRadians(deltaY / 10), [1, 0, 0]);
      sphere = worldObjects[0];
      mat4.multiply(newRotationMatrix, sphere.rotationMatrix, sphere.rotationMatrix);
      lastMouseX = newX;
      return lastMouseY = newY;
    };
    handleMouseDown = function(event) {
      mouseDown = true;
      lastMouseX = event.clientX;
      return lastMouseY = event.clientY;
    };
    start = function() {
      initWorldObjects();
      initBuffers();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      document.onmouseup = handleMouseUp;
      document.onmousemove = handleMouseMove;
      glContext.getCanvas().onmousedown = handleMouseDown;
      return tick();
    };
    return start();
  });

}).call(this);
