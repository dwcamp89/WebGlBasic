// Generated by CoffeeScript 1.9.0
(function() {
  require(['glMatrix-0.9.5.min', 'webgl-utils', 'WebGlConstants', 'gl', 'ShapeFactory'], function(glMatrix, webGlUtils, webGlConstants, gl, ShapeFactory) {
    var animate, cube, drawScene, initBuffers, lastTime, pyramid, start, tick;
    pyramid = null;
    cube = null;
    initBuffers = function() {
      pyramid = ShapeFactory.getShape('Pyramid');
      pyramid.initBuffers();
      cube = ShapeFactory.getShape('Cube');
      return cube.initBuffers();
    };
    drawScene = function() {
      var pMatrix;
      if (pMatrix === null) {
        pMatrix = mat4.create();
      }
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      pyramid.render();
      return cube.render();
    };
    lastTime = 0;
    animate = function() {
      var elapsed, timeNow;
      timeNow = new Date().getTime();
      if (lastTime !== 0) {
        elapsed = timeNow - lastTime;
        pyramid.yRot += (90 * elapsed) / 1000.0;
        cube.xRot += (90 * elapsed) / 1000.0;
        cube.yRot += (90 * elapsed) / 1000.0;
        cube.zRot += (90 * elapsed) / 1000.0;
      }
      return lastTime = timeNow;
    };
    tick = function() {
      requestAnimFrame(tick);
      drawScene();
      return animate();
    };
    start = function() {
      initBuffers();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LEQUAL);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      pyramid.x = 2.0;
      pyramid.z = -8.0;
      cube.x = -2.0;
      cube.z = -8.0;
      return tick();
    };
    return start();
  });

}).call(this);
