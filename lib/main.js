// Generated by CoffeeScript 1.9.1
(function() {
  require(['glMatrix-0.9.5.min', 'webgl-utils', 'WebGlConstants', 'shader'], function(glMatrix, webGlUtils, webGlConstants, shader) {
    var drawScene, fragmentShader, getShader, gl, initBuffers, initPrograms, initWebGL, mvMatrix, pMatrix, setMatrixUniforms, shaderProgram, squareVertexColorBuffer, squareVertexPositionBuffer, start, triangleVertexColorBuffer, triangleVertexPositionBuffer, vertexShader;
    gl = null;
    mvMatrix = null;
    pMatrix = null;
    triangleVertexPositionBuffer = null;
    triangleVertexColorBuffer = null;
    squareVertexPositionBuffer = null;
    squareVertexColorBuffer = null;
    shaderProgram = null;
    vertexShader = null;
    fragmentShader = null;
    initWebGL = function(canvas) {
      var error;
      try {
        gl = canvas.getContext(webGlConstants.WEB_GL_CONTEXT_NAME);
        gl = gl != null ? gl : canvas.getContext(webGlConstants.EXPERIMENTAL_WEB_GL_CONTEXT_NAME);
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
      } catch (_error) {
        error = _error;
        console.log('error initializing webgl');
        console.log(e.message);
      }
      if (!gl) {
        alert('Unable to initialize WebGL. Your browser may not support it.');
        gl = null;
      }
      return gl;
    };
    getShader = function(shaderObj) {
      var newShader;
      newShader = null;
      if (shaderObj.type === "FRAGMENT") {
        newShader = gl.createShader(gl.FRAGMENT_SHADER);
      } else if (shaderObj.type === "VERTEX") {
        newShader = gl.createShader(gl.VERTEX_SHADER);
      } else {
        return null;
      }
      gl.shaderSource(newShader, shaderObj.src);
      gl.compileShader(newShader);
      if (!gl.getShaderParameter(newShader, gl.COMPILE_STATUS)) {
        alert(gl.getShaderInfoLog(newShader));
        console.log(gl.getShaderInfoLog(newShader));
        return null;
      }
      return newShader;
    };
    initPrograms = function() {
      fragmentShader = getShader(shader.fragment);
      vertexShader = getShader(shader.vertex);
      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, fragmentShader);
      gl.attachShader(shaderProgram, vertexShader);
      gl.linkProgram(shaderProgram);
      if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        console.log(webGlConstants.ERROR_MESSAGES.UNABLE_TO_INITIALIZE_SHADERS);
        alert(webGlConstants.ERROR_MESSAGES.UNABLE_TO_INITIALIZE_SHADERS);
      }
      gl.useProgram(shaderProgram);
      shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
      gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
      shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
      gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
      shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
      return shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
    };
    initBuffers = function() {
      var colors, vertices;
      triangleVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
      vertices = [0.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, -1.0, 0.0];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      triangleVertexPositionBuffer.itemSize = 3;
      triangleVertexPositionBuffer.numberOfItems = 3;
      triangleVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexColorBuffer);
      colors = [1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
      triangleVertexColorBuffer.itemSize = 4;
      triangleVertexColorBuffer.numberOfItems = 3;
      squareVertexPositionBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
      vertices = [1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, -1.0, 0.0, -1.0, -1.0, 0.0];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
      squareVertexPositionBuffer.itemSize = 3;
      squareVertexPositionBuffer.numberOfItems = 4;
      squareVertexColorBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexColorBuffer);
      colors = [0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0];
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
      squareVertexColorBuffer.itemSize = 4;
      return squareVertexColorBuffer.numberOfItems = 4;
    };
    setMatrixUniforms = function() {
      gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
      return gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
    };
    drawScene = function() {
      gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
      mat4.identity(mvMatrix);
      mat4.translate(mvMatrix, [-1.5, 0.0, -7.0]);
      gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
      gl.bindBuffer(gl.ARRAY_BUFFER, triangleVertexColorBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, triangleVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
      setMatrixUniforms();
      gl.drawArrays(gl.TRIANGLES, 0, triangleVertexPositionBuffer.numberOfItems);
      mat4.translate(mvMatrix, [3.0, 0.0, 0.0]);
      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexPositionBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, squareVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
      gl.bindBuffer(gl.ARRAY_BUFFER, squareVertexColorBuffer);
      gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, squareVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
      setMatrixUniforms();
      return gl.drawArrays(gl.TRIANGLE_STRIP, 0, squareVertexPositionBuffer.numberOfItems);
    };
    start = function() {
      var canvas;
      mvMatrix = mat4.create();
      pMatrix = mat4.create();
      canvas = document.getElementById(webGlConstants.CANVAS_ID);
      gl = initWebGL(canvas);
      initPrograms();
      initBuffers();
      if (gl) {
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LEQUAL);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      }
      return drawScene();
    };
    return start();
  });

}).call(this);
