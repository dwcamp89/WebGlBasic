// Generated by CoffeeScript 1.9.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(['GLContext', 'ModelViewMatrix', 'PerspectiveMatrix', 'glMatrix-0.9.5.min', 'ShaderProgramFactory'], function(glContext, mvMatrix, pMatrix, glMatrix, ShaderProgramFactory) {
    var Star, degToRad, shaderProgram, twinkle;
    shaderProgram = ShaderProgramFactory.getInstance('star.vert', 'star.frag');
    twinkle = false;
    Star = (function() {
      var gl;

      gl = glContext.getSingleton();

      function Star() {
        this.drawStar = __bind(this.drawStar, this);
        this.render = __bind(this.render, this);
        this.animate = __bind(this.animate, this);
        this.angle = 0;
        this.distance = 0;
        this.rotationSpeed = 0;
        this.tilt = 90;
        this.spin = 0;
        this.zoom = -15;
        this.starVertexTextureCoordinateBuffer = gl.createBuffer();
        this.starVertexPositionBuffer = gl.createBuffer();
        shaderProgram.vertexPositionBuffer = gl.getAttribLocation(shaderProgram.program, 'aVertexPosition');
        gl.enableVertexAttribArray(shaderProgram.vertexPositionBuffer);
        shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram.program, 'aTextureCoord');
        gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);
        shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram.program, 'uPMatrix');
        shaderProgram.mvMatrixUniform = gl.getUniformLocation(shaderProgram.program, 'uMVMatrix');
        shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram.program, 'uSampler');
        shaderProgram.colorUniform = gl.getUniformLocation(shaderProgram.program, 'uColor');
        this.starTexture = gl.createTexture();
        this.starTexture.image = new Image();
        this.starTexture.image.onload = (function(_this) {
          return function() {
            return _this.handleLoadedTexture();
          };
        })(this);
        this.starTexture.image.src = 'images/Star.gif';
        this.randomizeColors();
      }

      Star.prototype.handleLoadedTexture = function() {
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.bindTexture(gl.TEXTURE_2D, this.starTexture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.starTexture.image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        return gl.bindTexture(gl.TEXTURE_2D, null);
      };

      Star.prototype.initBuffers = function() {
        var textureCoordinates, vertices;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.starVertexPositionBuffer);
        vertices = [-1.0, -1.0, 0.0, 1.0, -1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, 0.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        this.starVertexPositionBuffer.itemSize = 3;
        this.starVertexPositionBuffer.numberOfItems = 4;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.starVertexTextureCoordinateBuffer);
        textureCoordinates = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW);
        this.starVertexTextureCoordinateBuffer.itemSize = 2;
        return this.starVertexTextureCoordinateBuffer.numberOfItems = 4;
      };

      Star.prototype.animate = function(elapsedTime) {
        this.angle += this.rotationSpeed * 0.06 * elapsedTime;
        this.distance -= 0.01 * 0.06 * elapsedTime;
        if (this.distance < 0) {
          this.distance += 5;
          return this.randomizeColors();
        }
      };

      Star.prototype.render = function() {
        gl.disable(gl.DEPTH_TEST);
        gl.useProgram(shaderProgram.program);
        mvMatrix.pushMatrix();
        mat4.identity(mvMatrix);
        mat4.translate(mvMatrix, [0.0, 0.0, this.zoom]);
        mat4.rotate(mvMatrix, degToRad(this.tilt), [1.0, 0.0, 0.0]);
        mat4.rotate(mvMatrix, degToRad(this.angle), [0.0, 1.0, 0.0]);
        mat4.translate(mvMatrix, [this.distance, 0.0, 0.0]);
        mat4.rotate(mvMatrix, degToRad(this.angle * -1.0), [0.0, 1.0, 0.0]);
        mat4.rotate(mvMatrix, degToRad(this.tilt * -1.0), [1.0, 0.0, 0.0]);
        if (twinkle) {
          gl.uniform3f(shaderProgram.colorUniform, this.twinkleR, this.twinkleG, this.twinkleB);
          this.drawStar();
        }
        mat4.rotate(mvMatrix, degToRad(this.spin), [0.0, 0.0, 1.0]);
        gl.uniform3f(shaderProgram.colorUniform, this.r, this.g, this.b);
        this.drawStar();
        return mvMatrix.popMatrix();
      };

      Star.prototype.randomizeColors = function() {
        this.r = Math.random();
        this.g = Math.random();
        this.b = Math.random();
        this.twinkleR = Math.random();
        this.twinkleG = Math.random();
        return this.twinkleB = Math.random();
      };

      Star.prototype.drawStar = function() {
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, this.starTexture);
        gl.uniform1i(shaderProgram.samplerUniform, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.starVertexTextureCoordinateBuffer);
        gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, this.starVertexTextureCoordinateBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.starVertexPositionBuffer);
        gl.vertexAttribPointer(shaderProgram.vertexPositionBuffer, this.starVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
        gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
        gl.uniformMatrix4fv(shaderProgram.mvMatrixUniform, false, mvMatrix);
        return gl.drawArrays(gl.TRIANGLE_STRIP, 0, this.starVertexPositionBuffer.numberOfItems);
      };

      return Star;

    })();
    degToRad = function(degrees) {
      return degrees * Math.PI / 180.0;
    };
    return {
      getInstance: function() {
        return new Star();
      },
      setTwinkle: function(newTwinkle) {
        return twinkle = newTwinkle;
      }
    };
  });

}).call(this);
